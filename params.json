{"name":"Simple Code Generator (SCG)","tagline":"generates code automatically from models designed in a very simple language (or from C/C++ structs/classes, whichever syntax you prefer). This is based entirely on the approach of model-based-programming and saves a lot of time while keeping the code cleaner.","body":"Basic syntax\r\n============\r\n\r\nSimple Model File (SMF) - Structure\r\n-----------------------------------\r\n    (model|class|struct) <modelname>:\r\n        <type> <parameter>\r\n\r\nSyntax types\r\n------------\r\n`model` sets the syntax type to the default model.\r\n\r\n`struct` sets the syntax type to C-like-struct-model, which requires usage of semicolons and { }.\r\n\r\n`class` is basically an alias for struct, but used in C++-like-class-models.\r\n\r\nLater, there will be a library to use these C++ and C models in actual C/C++ code.\r\n\r\nOptional parts of the style\r\n---------------------------\r\nSpacing, indentation, semicolon after parameter\r\n\r\nExamples\r\n--------\r\n### Model (Simple)\r\n    model School:\r\n        string location\r\n        int teacher_count\r\n        int pupils_count\r\n\r\n### Struct (C)\r\n    struct School {\r\n        string location;\r\n        int teacher_count;\r\n        int pupils_count;\r\n    };\r\n(should work in C when you define string)\r\n\r\n### Class (C++)\r\n    class School {\r\n        string location;\r\n        int teacher_count;\r\n        int pupils_count;\r\n    };\r\n(should work in C++ when you specify `using namespace std;`)\r\n\r\nAdvanced syntax\r\n===============\r\n\r\nArrays\r\n------\r\n\r\n### Structure\r\n    <type> (array|list) <parameter>\r\n    or\r\n    (array|list) <type> <parameter>\r\n    or\r\n    []\r\n\r\n### Optional parts of the style\r\nSpacing\r\n\r\n[] can be suffix/prefix of type or parameter\r\n\r\narray must be prefix/suffix of the type\r\n\r\nInstead of using the array or list, you can also append an \"s\" to the type. For example: Teachers loads an array of the model Teacher.\r\n\r\n### Examples\r\n#### Model (Simple)\r\n    model School:\r\n        string location\r\n        string array teacher_names\r\n        int pupils_count\r\n\r\n#### Struct (C)\r\n    struct School {\r\n        string location;\r\n        string teachers[];\r\n        int pupils_count;\r\n    };\r\n\r\n#### Class (C++)\r\n    struct School {\r\n        string location;\r\n        string teachers[];\r\n        int pupils_count;\r\n    };\r\n\r\nImports\r\n-------\r\n### Syntax\r\n    import <modelname>\r\n\r\n### Optional parts of the style\r\nSemicolon after parameter, C/C++-like function\r\n\r\n### Examples\r\n#### Model (Simple)\r\n    import Teacher\r\n    model School:\r\n        string location\r\n        Teachers teachers\r\n        int pupils_count\r\n\r\n#### Struct (C)\r\n    import(\"Teacher\");\r\n    struct School {\r\n        string location;\r\n        Teacher teachers[];\r\n        int pupils_count;\r\n    };\r\n\r\n#### Class (C++)\r\n    import(\"Teacher\");\r\n    struct School {\r\n        string location;\r\n        Teacher teachers[];\r\n        int pupils_count;\r\n    };\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}